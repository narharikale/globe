// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  cities    City[]
  clues     Clue[]
  funFacts  FunFact[]
  trivias   Trivia[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  countryId Int
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, countryId])
}

model Clue {
  id        Int      @id @default(autoincrement())
  text      String
  countryId Int
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FunFact {
  id        Int      @id @default(autoincrement())
  text      String
  countryId Int
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trivia {
  id        Int      @id @default(autoincrement())
  text      String
  countryId Int
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            Int           @id @default(autoincrement())
  username      String?
  gameHistory   GameHistory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model GameHistory {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  correctCount  Int           @default(0)
  incorrectCount Int          @default(0)
  completedAt   DateTime      @default(now())
  countriesPlayed CountryPlayed[]
}

model CountryPlayed {
  id            Int           @id @default(autoincrement())
  gameHistoryId Int
  gameHistory   GameHistory   @relation(fields: [gameHistoryId], references: [id], onDelete: Cascade)
  countryId     Int
  wasCorrect    Boolean
  createdAt     DateTime      @default(now())
}